package RpcSub;

import "RpcEnum.proto";

message GetPlayerResponse {
    optional int32 unknown1 = 1;
    optional Profile profile = 2;
}

message Profile {
  required int64 creation_time = 1;
  optional string username = 2;
  optional RpcEnum.TeamColor team = 5;
  optional bytes tutorial = 7; 
  optional AvatarDetails avatar = 8; 
  optional int32 poke_storage = 9;
  optional int32 item_storage = 10;
  optional DailyBonus daily_bonus = 11;
  optional bytes unknown12 = 12;
  optional bytes unknown13 = 13;
  repeated Currency currency = 14;
}

message DailyBonus {
  optional int64 NextCollectTimestampMs = 1;
  optional int64 NextDefenderBonusCollectTimestampMs = 2;
}

message Currency {
  required string type = 1;
  optional int32 amount = 2;
}

message AvatarDetails {
  optional int32 unknown2 = 2;
  optional int32 unknown3 = 3;
  optional int32 unknown9 = 9;
  optional int32 unknown10 = 10;
}

message DownloadSettingsRequest {
  optional string hash = 1;
}

message GetInventoryResponse {
  optional bool success = 1;
  optional InventoryDelta inventory_delta = 2;
}

message InventoryDelta {
  optional int64 original_timestamp_ms = 1;
  optional int64 new_timestamp_ms = 2;
  repeated InventoryItem inventory_items = 3;
}

message InventoryItem {
  optional int64 modified_timestamp_ms = 1;
  optional int64 deleted_item_key = 2;
  optional InventoryItemData inventory_item_data = 3;
}

message InventoryItemData {
  optional PokemonData pokemon = 1;
  optional Item item = 2;
  optional PokedexEntry pokedex_entry = 3;
  optional PlayerStats player_stats = 4;
  optional PlayerCurrency player_currency = 5;
  optional PlayerCamera player_camera = 6;
  optional InventoryUpgrades inventory_upgrades = 7;
  optional AppliedItems applied_items = 8;
  optional EggIncubators egg_incubators = 9;
  optional PokemonFamily pokemon_family = 10;
}

message Pokemon {
  optional int32 id = 1;
  optional RpcEnum.PokemonId pokemon_type = 2;
  optional int32 cp = 3;
  optional int32 stamina = 4;
  optional int32 stamina_max = 5;
  optional RpcEnum.PokemonMove move_1 = 6;
  optional RpcEnum.PokemonMove move_2 = 7;
  optional int32 deployed_fort_id = 8;
  optional string owner_name = 9;
  optional bool is_egg = 10;
  optional int32 egg_km_walked_target = 11;
  optional int32 egg_km_walked_start = 12;
  optional int32 origin = 14;
  optional float height_m = 15;
  optional float weight_kg = 16;
  optional int32 individual_attack = 17;
  optional int32 individual_defense = 18;
  optional int32 individual_stamina = 19;
  optional int32 cp_multiplier = 20;
  optional int32 pokeball = 21;
  optional uint64 captured_cell_id = 22;
  optional int32 battles_attacked = 23;
  optional int32 battles_defended = 24;
  optional int32 egg_incubator_id = 25;
  optional uint64 creation_time_ms = 26;
  optional int32 num_upgrades = 27;
  optional int32 additional_cp_multiplier = 28;
  optional int32 favorite = 29;
  optional string nickname = 30;
  optional int32 from_fort = 31;
}

message Item {
  optional RpcEnum.ItemType item = 1;
  optional int32 count = 2;
  optional bool unseen = 3;
}

message PokedexEntry {
  optional int32 pokedex_entry_number = 1;
  optional int32 times_encountered = 2;
  optional int32 times_captured = 3;
  optional int32 evolution_stone_pieces = 4;
  optional int32 evolution_stones = 5;
}

message PlayerStats {
  optional int32 level = 1;
  optional int64 experience = 2;
  optional int64 prev_level_xp = 3;
  optional int64 next_level_xp = 4;
  optional float km_walked = 5;
  optional int32 pokemons_encountered = 6;
  optional int32 unique_pokedex_entries = 7;
  optional int32 pokemons_captured = 8;
  optional int32 evolutions = 9;
  optional int32 poke_stop_visits = 10;
  optional int32 pokeballs_thrown = 11;
  optional int32 eggs_hatched = 12;
  optional int32 big_magikarp_caught = 13;
  optional int32 battle_attack_won = 14;
  optional int32 battle_attack_total = 15;
  optional int32 battle_defended_won = 16;
  optional int32 battle_training_won = 17;
  optional int32 battle_training_total = 18;
  optional int32 prestige_raised_total = 19;
  optional int32 prestige_dropped_total = 20;
  optional int32 pokemon_deployed = 21;
  optional bytes pokemon_caught_by_type = 22; // TODO: repeated PokemonType ??
  optional int32 small_rattata_caught = 23;
}

message PlayerCurrency {
  optional int32 gems = 1;
}

message PlayerCamera {
  optional bool is_default_camera = 1;
}

message InventoryUpgrades {
  repeated InventoryUpgrade inventory_upgrades = 1;
}

message InventoryUpgrade {
  optional RpcEnum.ItemType item = 1;
  optional RpcEnum.InventoryUpgradeType upgrade_type = 2;
  optional int32 additional_storage = 3;
}

message AppliedItems {
  optional AppliedItem item = 4;
}

message AppliedItem {
  optional RpcEnum.ItemId item_type = 1;
  optional RpcEnum.ItemType item_type_category = 2;
  optional int64 expire_ms = 3;
  optional int64 applied_ms = 4;
}

message EggIncubators {
  optional EggIncubator egg_incubator = 1;
}

message EggIncubator {
  optional string item_id = 1;
  optional RpcEnum.ItemType item_type = 2;
  optional RpcEnum.EggIncubatorType incubator_type = 3;
  optional int32 uses_remaining = 4;
  optional int64 pokemon_id = 5; // TODO: Check if is PokemonType
  optional double start_km_walked = 6;
  optional double target_km_walked = 7;
}

message PokemonFamily {
  optional RpcEnum.PokemonFamilyId family_id = 1;
  optional int32 candy = 2;
}

message GetMapObjectsRequest {
  optional bytes cell_id = 1;
  optional bytes since_timestamp_ms = 2;
  optional double latitude = 3;
  optional double longitude = 4;
}

message GetMapObjectsResponse {
  repeated MapCell map_cells = 1;
  optional RpcEnum.MapObjectsStatus status = 2;
}

message MapCell {
  // S2 geographic area that the cell covers (http://s2map.com/) (https://code.google.com/archive/p/s2-geometry-library/)
  optional uint64 s2_cell_id = 1;
  optional int64 current_timestamp_ms = 2;
  repeated FortData forts = 3;
  repeated SpawnPoint spawn_points = 4;
  repeated string deleted_objects = 6;
  optional bool is_truncated_list = 7;
  repeated FortSummary fort_summaries = 8;
  repeated SpawnPoint decimated_spawn_points = 9;

  // Pokemon within 2 steps or less.
  repeated WildPokemon wild_pokemons = 5;
  // Pokemon within 1 step or none.
  repeated MapPokemon catchable_pokemons = 10;
  // Pokemon farther away than 2 steps, but still in the area.
  repeated NearbyPokemon nearby_pokemons = 11;
}

message FortData {
  optional string id = 1;
  optional int64 last_modified_timestamp_ms = 2;
  optional double latitude = 3;
  optional double longitude = 4;
  optional bool enabled = 8;
  optional RpcEnum.FortType type = 9;

  //// Fields related to gyms only

  // Team that owns the gym
  optional RpcEnum.TeamColor owned_by_team = 5;

  // Highest CP Pokemon at the gym
  optional RpcEnum.PokemonId guard_pokemon_id = 6;
  optional int32 guard_pokemon_cp = 7;

  // Prestigate / experience of the gym
  optional int64 gym_points = 10;

  // Whether someone is battling at the gym currently
  optional bool is_in_battle = 11;

  //// Fields related to pokestops only

  // Timestamp when the pokestop can be activated again to get items / xp
  optional int64 cooldown_complete_timestamp_ms = 14;

  optional RpcEnum.FortSponsor sponsor = 15;
  optional RpcEnum.FortRenderingType rendering_type = 16;

  // Might represent the type of item applied to the pokestop, right now only lures can be applied
  optional bytes active_fort_modifier = 12;
  optional FortLureInfo lure_info = 13;
}

message FortLureInfo {
  optional string fort_id = 1;
  optional double unknown2 = 2;
  optional RpcEnum.PokemonId active_pokemon_id = 3;
  optional int64 lure_expires_timestamp_ms = 4;
}

message SpawnPoint {
  optional double latitude = 2;
  optional double longitude = 3;
}

message FortSummary {
  optional int32 fort_summary_id = 1;
  optional int32 last_modified_timestamp_ms = 2;
  optional int32 latitude = 3;
  optional int32 longitude = 4;
}

message WildPokemon {
  optional fixed64 encounter_id = 1;
  optional int64 last_modified_timestamp_ms = 2;
  optional double latitude = 3;
  optional double longitude = 4;
  optional string spawnpoint_id = 5;
  optional PokemonData pokemon_data = 7;
  optional int32 time_till_hidden_ms = 11;
}

message PokemonData {
  optional fixed64 id = 1;
  optional RpcEnum.PokemonId pokemon_id = 2;
  optional int32 cp = 3;
  optional int32 stamina = 4;
  optional int32 stamina_max = 5;
  optional RpcEnum.PokemonMove move_1 = 6;
  optional RpcEnum.PokemonMove move_2 = 7;
  optional int32 deployed_fort_id = 8;
  optional string owner_name = 9;
  optional bool is_egg = 10;
  optional int32 egg_km_walked_target = 11;
  optional int32 egg_km_walked_start = 12;
  optional int32 origin = 14;
  optional float height_m = 15;
  optional float weight_kg = 16;
  optional int32 individual_attack = 17;
  optional int32 individual_defense = 18;
  optional int32 individual_stamina = 19;
  optional int32 cp_multiplier = 20;
  optional int32 pokeball = 21;
  optional uint64 captured_cell_id = 22;
  optional int32 battles_attacked = 23;
  optional int32 battles_defended = 24;
  optional int32 egg_incubator_id = 25;
  optional uint64 creation_time_ms = 26;
  optional int32 num_upgrades = 27;
  optional int32 additional_cp_multiplier = 28;
  optional int32 favorite = 29;
  optional string nickname = 30;
  optional int32 from_fort = 31;
}

message MapPokemon {
  optional string spawnpoint_id = 1;
  optional fixed64 encounter_id = 2;
  optional RpcEnum.PokemonId pokemon_id = 3;
  // After this timestamp, the pokemon will be gone.
  optional int64 expiration_timestamp_ms = 4;
  optional double latitude = 5;
  optional double longitude = 6;
}

message NearbyPokemon {
  optional RpcEnum.PokemonId pokemon_id = 1;
  optional float distance_in_meters = 2;
  optional fixed64 encounter_id = 3;
}

message DownloadSettingsResponse {
  optional string error = 1;
  optional string hash = 2;
  optional GlobalSettings settings = 3;
}

message GlobalSettings {
  optional FortSettings fort_settings = 2;
  optional MapSettings map_settings = 3;
  optional LevelSettings level_settings = 4;
  optional InventorySettings inventory_settings = 5;
  optional string minimum_client_version = 6;
}

message FortSettings {
  optional double interaction_range_meters = 1;
  optional int32 max_total_deployed_pokemon = 2;
  optional int32 max_player_deployed_pokemon = 3;
  optional double deploy_stamina_multiplier = 4;
  optional double deploy_attack_multiplier = 5;
  optional double far_interaction_range_meters = 6;
}

message MapSettings {
  optional double pokemon_visible_range = 1;
  optional double poke_nav_range_meters = 2;
  optional double encounter_range_meters = 3;
  optional float get_map_objects_min_refresh_seconds = 4;
  optional float get_map_objects_max_refresh_seconds = 5;
  optional float get_map_objects_min_distance_meters = 6;
  optional string google_maps_api_key = 7;
}

message LevelSettings {
  optional double trainer_cp_modifier = 2;
  optional double trainer_difficulty_modifier = 3;
}

message InventorySettings {
  optional int32 max_pokemon = 1;
  optional int32 max_bag_items = 2;
  optional int32 base_pokemon = 3;
  optional int32 base_bag_items = 4;
  optional int32 base_eggs = 5;
}

message PlayerUpdateRequest {
  optional double latitude = 1;
  optional double longitude = 2;
}

message PlayerUpdateResponse {
  repeated WildPokemon wild_pokemons = 1;
  repeated FortData forts = 2;
  optional int32 forts_nearby = 3;
}

message DownloadItemTemplatesRequest {
	// No message needed.
}

message DownloadItemTemplatesResponse {
  optional bool success = 1;
  repeated ItemTemplate item_templates = 2;
  optional uint64 timestamp_ms = 3;

  message ItemTemplate {
    optional string template_id = 1;

    optional PokemonSettings pokemon_settings = 2;
    optional ItemSettings item_settings = 3;
    optional MoveSettings move_settings = 4;
    optional MoveSequenceSettings move_sequence_settings = 5;
    optional TypeEffectiveSettings type_effective = 8;
    optional BadgeSettings badge_settings = 10; 
    optional CameraSettings camera = 11;
    optional PlayerLevelSettings player_level = 12;
    optional GymLevelSettings gym_level = 13;
    optional GymBattleSettings battle_settings = 14;
    optional EncounterSettings encounter_settings = 15;
    optional IapItemDisplay iap_item_display = 16;
    optional IapSettings iap_settings = 17;
    optional PokemonUpgradeSettings pokemon_upgrades = 18;
    optional EquippedBadgeSettings equipped_badges = 19;
  }
}

message UseItemCaptureRequest {
  optional RpcEnum.ItemId item_id = 1;
  optional fixed64 encounter_id = 2;
  optional string spawn_point_guid = 3;
}

message UseItemCaptureResponse {
  optional bool success = 1;
  optional double item_capture_mult = 2;
  optional double item_flee_mult = 3;
  optional bool stop_movement = 4;
  optional bool stop_attack = 5;
  optional bool target_max = 6;
  optional bool target_slow = 7;
}

message ReleasePokemonRequest {
  optional fixed64 pokemon_id = 1;
}

message ReleasePokemonResponse {
  optional Result result = 1;
  optional int32 candy_awarded = 2;

  enum Result {
    UNSET = 0;
    SUCCESS = 1;
    POKEMON_DEPLOYED = 2;
    FAILED = 3;
    ERROR_POKEMON_IS_EGG = 4;
  }
}

message GetHatchedEggsRequest {
  // No message needed.
}

// Confirm if this is correct, I think that it should be "repeated HatchedEgg hatched_eggs" or something like that.
message GetHatchedEggsResponse {
  optional bool success = 1;
  repeated uint64 pokemon_id = 2 [packed=true]; // Might be POGOProtos.Enums.Pokemon
  repeated int32 experience_awarded = 3;
  repeated int32 candy_awarded = 4;
  repeated int32 stardust_awarded = 5;
}

message FortSearchRequest {
  optional string fort_id = 1;
  optional double player_latitude = 2;
  optional double player_longitude = 3;
  optional double fort_latitude = 4;
  optional double fort_longitude = 5;
}

message FortSearchResponse {
  optional Result result = 1;
  repeated ItemAward items_awarded = 2;
  optional int32 gems_awarded = 3;
  optional PokemonData pokemon_data_egg = 4;
  optional int32 experience_awarded = 5;
  optional int64 cooldown_complete_timestamp_ms = 6;
  optional int32 chain_hack_sequence_number = 7;

  message ItemAward {
    optional RpcEnum.ItemId item_id = 1;
    optional int32 item_count = 2;
  }

  enum Result {
    NO_RESULT_SET = 0;
    SUCCESS = 1;
    OUT_OF_RANGE = 2;
    IN_COOLDOWN_PERIOD = 3;
    INVENTORY_FULL = 4;
  }
}

message FortDetailsRequest {
  optional string fort_id = 1;
  optional double latitude = 2;
  optional double longitude = 3;
}

message FortDetailsResponse {
  optional string fort_id = 1;
  optional RpcEnum.TeamColor team_color = 2;
  optional PokemonData pokemon_data = 3;
  optional string name = 4;
  repeated string image_urls = 5;
  optional int32 fp = 6;
  optional int32 stamina = 7;
  optional int32 max_stamina = 8;
  optional RpcEnum.FortType type = 9;
  optional double latitude = 10;
  optional double longitude = 11;
  optional string description = 12;
  repeated FortModifier modifiers = 13;
}

message FortModifier {
  optional RpcEnum.ItemId item_id = 1;
  optional int64 expiration_timestamp_ms = 2;
  optional string deployer_player_codename = 3;
}

message EncounterRequest {
  optional fixed64 encounter_id = 1;
  optional string spawnpoint_id = 2;
  optional double player_latitude = 3;
  optional double player_longitude = 4;
}

message EncounterResponse {
  optional WildPokemon wild_pokemon = 1;
  optional Background background = 2;
  optional Status status = 3;
  optional CaptureProbability capture_probability = 4;

  enum Background {
    PARK = 0;
    DESERT = 1;
  }
  
  enum Status {
    ENCOUNTER_ERROR = 0;
    ENCOUNTER_SUCCESS = 1;
    ENCOUNTER_NOT_FOUND = 2;
    ENCOUNTER_CLOSED = 3;
    ENCOUNTER_POKEMON_FLED = 4;
    ENCOUNTER_NOT_IN_RANGE = 5;
    ENCOUNTER_ALREADY_HAPPENED = 6;
    POKEMON_INVENTORY_FULL = 7;
  }
}

message CaptureProbability {
  repeated RpcEnum.ItemId pokeball_type = 1;
  repeated float capture_probability = 2;
  optional double reticle_difficulty_scale = 12;
}

message DiskEncounterRequest {
  optional fixed64 encounter_id = 1;
  optional string fort_id = 2;
  optional double player_latitude = 3;
  optional double player_longitude = 4;
}

message DiskEncounterResponse {
  optional Result result = 1;
  optional PokemonData pokemon_data = 2;
  optional CaptureProbability capture_probability = 3;

  enum Result {
    UNKNOWN = 0;
    SUCCESS = 1;
    NOT_AVAILABLE = 2;
    NOT_IN_RANGE = 3;
    ENCOUNTER_ALREADY_FINISHED = 4;
    POKEMON_INVENTORY_FULL = 5;
  }
}

message CatchPokemonRequest {
  optional fixed64 encounter_id = 1;
  optional int32 pokeball = 2;
  optional double normalized_reticle_size = 3;
  optional string spawn_point_guid = 4;
  optional bool hit_pokemon = 5;
  optional double spin_modifier = 6;
  optional double NormalizedHitPosition = 7;
}

message CatchPokemonResponse {
  optional CatchStatus status = 1;
  optional double miss_percent = 2;
  optional uint64 captured_pokemon_id = 3;
  optional CaptureScore scores = 4;

  enum CatchStatus {
    CATCH_ERROR = 0;
    CATCH_SUCCESS = 1;
    CATCH_ESCAPE = 2;
    CATCH_FLEE = 3;
    CATCH_MISSED = 4;
  }
}

message CaptureScore {
  repeated RpcEnum.ActivityType activity_type = 1;
  repeated int32 xp = 2;
  repeated int32 candy = 3;
  repeated int32 stardust = 4;
}

message CheckAwardedBadgesRequest {
	// No message needed.
}

// Confirm if this is correct, I think that it should be "repeated AwardedBadge awarded_badges" or something like that.
message CheckAwardedBadgesResponse {
  optional bool success = 1;
  repeated RpcEnum.BadgeType awarded_badges = 2;
  repeated int32 awarded_badge_levels = 3;
}

message EquippedBadgeSettings {
  optional int64 equip_badge_cooldown_ms = 1;
  repeated float catch_probability_bonus = 2;
  repeated float flee_probability_bonus = 3;
}

message PokemonUpgradeSettings {
  optional int32 upgrades_per_level = 1;
  optional int32 allowed_levels_above_player = 2;
  repeated int32 candy_cost = 3;
  repeated int32 stardust_cost = 4;
}

message IapSettings {
  optional int32 daily_bonus_coins = 1;
  repeated int32 daily_defender_bonus_per_pokemon = 2;
  optional int32 daily_defender_bonus_max_defenders = 3;
  repeated string daily_defender_bonus_currency = 4;
  optional int64 min_time_between_claims_ms = 5;
  optional bool daily_bonus_enabled = 6;
  optional bool daily_defender_bonus_enabled = 7;
}

message IapItemDisplay {
  optional string sku = 1;
  optional RpcEnum.HoloIapItemCategory category = 2;
  optional int32 sort_order = 3;
  repeated RpcEnum.ItemId item_ids = 4;
  repeated int32 counts = 5;
}

message EncounterSettings {
  optional float spin_bonus_threshold = 1;
  optional float excellent_throw_threshold = 2;
  optional float great_throw_threshold = 3;
  optional float nice_throw_threshold = 4;
  optional int32 milestone_threshold = 5;
}

message GymBattleSettings {
  optional float energy_per_sec = 1;
  optional float dodge_energy_cost = 2;
  optional float retarget_seconds = 3;
  optional float enemy_attack_interval = 4;
  optional float attack_server_interval = 5;
  optional float round_duration_seconds = 6;
  optional float bonus_time_per_ally_seconds = 7;
  optional int32 maximum_attackers_per_battle = 8;
  optional float same_type_attack_bonus_multiplier = 9;
  optional int32 maximum_energy = 10;
  optional float energy_delta_per_health_lost = 11;
  optional int32 dodge_duration_ms = 12;
  optional int32 minimum_player_level = 13;
  optional int32 swap_duration_ms = 14;
}

message GymLevelSettings {
	repeated int32 required_experience = 1;
	repeated int32 leader_slots = 2;
	repeated int32 trainer_slots = 3;
	repeated int32 search_roll_bonus = 4;
}

message PlayerLevelSettings {
	repeated int32 rank_num = 1;
	repeated int32 required_experience = 2;
	repeated float cp_multiplier = 3;
	optional int32 max_egg_player_level = 4;
	optional int32 max_encounter_player_level = 5;
}

message CameraSettings {
	optional string next_camera = 1;
	repeated RpcEnum.CameraInterpolation interpolation = 2;
	repeated RpcEnum.CameraTarget target_type = 3;
	repeated float ease_in_speed = 4;
	repeated float east_out_speed = 5;
	repeated float duration_seconds = 6;
	repeated float wait_seconds = 7;
	repeated float transition_seconds = 8;
	repeated float angle_degree = 9;
	repeated float angle_offset_degree = 10;
	repeated float pitch_degree = 11;
	repeated float pitch_offset_degree = 12;
	repeated float roll_degree = 13;
	repeated float distance_meters = 14;
	repeated float height_percent = 15;
	repeated float vert_ctr_ratio = 16;
}

message BadgeSettings {
  optional RpcEnum.BadgeType badge_type = 1;
  optional int32 badge_rank = 2;
  repeated int32 targets = 3;
}

message TypeEffectiveSettings {
  repeated float attack_scalar = 1;
  optional RpcEnum.PokemonType attack_type = 2;
}

message MoveSequenceSettings {
  repeated string sequence = 1;
}

message MoveSettings {
  optional RpcEnum.PokemonMovementType movement_id = 1;
  optional int32 animation_id = 2;
  optional RpcEnum.PokemonType pokemon_type = 3;
  optional float power = 4;
  optional float accuracy_chance = 5;
  optional float critical_chance = 6;
  optional float heal_scalar = 7;
  optional float stamina_loss_scalar = 8;
  optional int32 trainer_level_min = 9;
  optional int32 trainer_level_max = 10;
  optional string vfx_name = 11;
  optional int32 duration_ms = 12;
  optional int32 damage_window_start_ms = 13;
  optional int32 damage_window_end_ms = 14;
  optional int32 energy_delta = 15;
}

message PokemonSettings {
  optional RpcEnum.PokemonId pokemon_id = 1;
  optional float model_scale = 3;
  optional RpcEnum.PokemonType type = 4;
  optional RpcEnum.PokemonType type_2 = 5;
  optional CameraAttributes camera = 6;
  optional EncounterAttributes encounter = 7;
  optional StatsAttributes stats = 8;
  repeated RpcEnum.PokemonMove quick_moves = 9;
  repeated RpcEnum.PokemonMove cinematic_moves = 10;
  repeated float animation_time = 11;
  repeated RpcEnum.PokemonId evolution_ids = 12;
  optional int32 evolution_pips = 13;
  optional RpcEnum.PokemonClass class = 14;
  optional float pokedex_height_m = 15;
  optional float pokedex_weight_kg = 16;
  optional RpcEnum.PokemonId parent_pokemon_id = 17;
  optional float height_std_dev = 18;
  optional float weight_std_dev = 19;
  optional float km_distance_to_hatch = 20;
  optional RpcEnum.PokemonFamilyId family_id = 21;
  optional int32 candy_to_evolve = 22;
}

message CameraAttributes {
  optional float disk_radius_m = 1;
  optional float cylinder_radius_m = 2;
  optional float cylinder_height_m = 3;
  optional float cylinder_ground_m = 4;
  optional float shoulder_mode_scale = 5;
}

message EncounterAttributes {
  optional float base_capture_rate = 1;
  optional float base_flee_rate = 2;
  optional float collision_radius_m = 3;
  optional float collision_height_m = 4;
  optional float collision_head_radius_m = 5;
  optional RpcEnum.PokemonMovementType movement_type = 6;
  optional float movement_timer_s = 7;
  optional float jump_time_s = 8;
  optional float attack_timer_s = 9;
}

message StatsAttributes {
  optional int32 base_stamina = 1;
  optional int32 base_attack = 2;
  optional int32 base_defense = 3;
  optional int32 dodge_energy_delta = 8;
}

message ItemSettings {
  optional RpcEnum.ItemId item_id = 1;
  optional RpcEnum.ItemType item_type = 2;
  optional RpcEnum.ItemCategory category = 3;
  optional float drop_freq = 4;
  optional int32 drop_trainer_level = 5;

  // One of the below attributes will be set in the response, the other will be null.

  optional PokeballAttributes pokeball = 6;
  optional PotionAttributes potion = 7;
  optional ReviveAttributes revive = 8;
  optional BattleAttributes battle = 9;
  optional FoodAttributes food = 10;
  optional InventoryUpgradeAttributes inventory_upgrade = 11;
  optional ExperienceBoostAttributes xp_boost = 12;
  optional IncenseAttributes incense = 13;
  optional EggIncubatorAttributes egg_incubator = 14;
  optional FortModifierAttributes fort_modifier = 15;
}

message BattleAttributes {
  optional float sta_percent = 1;
}

message EggIncubatorAttributes {
  optional RpcEnum.EggIncubatorType incubator_type = 1;
  optional int32 uses = 2;
  optional float distance_multiplier = 3;
}

message ExperienceBoostAttributes {
  optional float xp_multiplier = 1;
  optional int32 boost_duration_ms = 2;
}

message FoodAttributes {
  repeated RpcEnum.ItemEffect item_effect = 1;
  repeated float item_effect_percent = 2;
  optional float growth_percent = 3;
}

message FortModifierAttributes {
  optional int32 modifier_lifetime_seconds = 1;
  optional int32 troy_disk_num_pokemon_spawned = 2;
}

message IncenseAttributes {
  optional int32 incense_lifetime_seconds = 1;
  repeated RpcEnum.PokemonType pokemon_type = 2;
  optional float pokemon_incense_type_probability = 3;
  optional int32 standing_time_between_encounters_seconds = 4;
  optional int32 moving_time_between_encounter_seconds = 5;
  optional int32 distance_required_for_shorter_interval_meters = 6;
  optional int32 pokemon_attracted_length_sec = 7;
}

message InventoryUpgradeAttributes {
  optional int32 additional_storage = 1;
  optional RpcEnum.InventoryUpgradeType upgrade_type = 2;
}

message PokeballAttributes {
  optional RpcEnum.ItemEffect item_effect = 1;
  optional float capture_multi = 2;
  optional float capture_multi_effect = 3;
  optional float item_effect_mod = 4;
}

message PotionAttributes {
  optional float sta_percent = 1;
  optional int32 sta_amount = 2;
}

message ReviveAttributes {
  optional float sta_percent = 1;
}
